{"ast":null,"code":"import axios from 'axios';\nimport setAuthToken from '../utils/setAuthToken';\nimport jwt_decode from 'jwt-decode';\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from './types';\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n};\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n};\nexport const setErrors = err => {\n  return {\n    type: GET_ERRORS,\n    payload: err.response.data\n  };\n};\nexport const registerUser = (userData, history) => dispatch => {\n  axios.post('/api/users/register', userData).then(res => history.push(\"/loginbrand\")).catch(err => dispatch(setErrors(err)));\n};\nexport const loginUser = userData => dispatch => {\n  axios.post('/api/users/login', userData).then(res => {\n    const token = res.data.token;\n    localStorage.setItem(\"jwtToken\", token);\n    setAuthToken(token);\n    const decoded = jwt_decode(token);\n    dispatch(setCurrentUser(decoded));\n  }).catch(err => dispatch(setErrors(err)));\n};\nexport const logoutUser = () => dispatch => {\n  localStorage.removeItem(\"jwtToken\");\n  setAuthToken(false);\n  dispatch(setCurrentUser({}));\n};","map":{"version":3,"sources":["/Users/avikabir/Desktop/bootcamp/2/influent-new/client/src/actions/authActions.js"],"names":["axios","setAuthToken","jwt_decode","GET_ERRORS","SET_CURRENT_USER","USER_LOADING","setCurrentUser","decoded","type","payload","setUserLoading","setErrors","err","response","data","registerUser","userData","history","dispatch","post","then","res","push","catch","loginUser","token","localStorage","setItem","logoutUser","removeItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,UAAT,EAAqBC,gBAArB,EAAuCC,YAAvC,QAA2D,SAA3D;AAEA,OAAO,MAAMC,cAAc,GAAGC,OAAO,IAAI;AACrC,SAAO;AACHC,IAAAA,IAAI,EAAEJ,gBADH;AAEHK,IAAAA,OAAO,EAAEF;AAFN,GAAP;AAIH,CALM;AAOP,OAAO,MAAMG,cAAc,GAAG,MAAM;AAChC,SAAO;AACHF,IAAAA,IAAI,EAAEH;AADH,GAAP;AAGH,CAJM;AAMP,OAAO,MAAMM,SAAS,GAAGC,GAAG,IAAI;AAC5B,SAAO;AACHJ,IAAAA,IAAI,EAAEL,UADH;AAEHM,IAAAA,OAAO,EAAEG,GAAG,CAACC,QAAJ,CAAaC;AAFnB,GAAP;AAIH,CALM;AAOP,OAAO,MAAMC,YAAY,GAAG,CAACC,QAAD,EAAWC,OAAX,KAAuBC,QAAQ,IAAI;AAC3DlB,EAAAA,KAAK,CAACmB,IAAN,CAAW,qBAAX,EAAkCH,QAAlC,EAA4CI,IAA5C,CAAiDC,GAAG,IAAIJ,OAAO,CAACK,IAAR,CAAa,aAAb,CAAxD,EAAqFC,KAArF,CAA2FX,GAAG,IAAIM,QAAQ,CAACP,SAAS,CAACC,GAAD,CAAV,CAA1G;AACH,CAFM;AAIP,OAAO,MAAMY,SAAS,GAAGR,QAAQ,IAAIE,QAAQ,IAAI;AAC7ClB,EAAAA,KAAK,CAACmB,IAAN,CAAW,kBAAX,EAA+BH,QAA/B,EAAyCI,IAAzC,CAA8CC,GAAG,IAAI;AAAA,UACzCI,KADyC,GAC/BJ,GAAG,CAACP,IAD2B,CACzCW,KADyC;AAGjDC,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,KAAjC;AACAxB,IAAAA,YAAY,CAACwB,KAAD,CAAZ;AAEA,UAAMlB,OAAO,GAAGL,UAAU,CAACuB,KAAD,CAA1B;AACAP,IAAAA,QAAQ,CAACZ,cAAc,CAACC,OAAD,CAAf,CAAR;AACH,GARD,EAQGgB,KARH,CAQSX,GAAG,IAAIM,QAAQ,CAACP,SAAS,CAACC,GAAD,CAAV,CARxB;AASH,CAVM;AAYP,OAAO,MAAMgB,UAAU,GAAG,MAAMV,QAAQ,IAAI;AACxCQ,EAAAA,YAAY,CAACG,UAAb,CAAwB,UAAxB;AACA5B,EAAAA,YAAY,CAAC,KAAD,CAAZ;AACAiB,EAAAA,QAAQ,CAACZ,cAAc,CAAC,EAAD,CAAf,CAAR;AACH,CAJM","sourcesContent":["import axios from 'axios';\nimport setAuthToken from '../utils/setAuthToken';\nimport jwt_decode from 'jwt-decode';\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from './types';\n\nexport const setCurrentUser = decoded => {\n    return {\n        type: SET_CURRENT_USER,\n        payload: decoded\n    };\n};\n\nexport const setUserLoading = () => {\n    return {\n        type: USER_LOADING\n    };\n};\n\nexport const setErrors = err => {\n    return {\n        type: GET_ERRORS,\n        payload: err.response.data\n    };\n};\n\nexport const registerUser = (userData, history) => dispatch => {\n    axios.post('/api/users/register', userData).then(res => history.push(\"/loginbrand\")).catch(err => dispatch(setErrors(err)));\n};\n\nexport const loginUser = userData => dispatch => {\n    axios.post('/api/users/login', userData).then(res => {\n        const { token } = res.data;\n        \n        localStorage.setItem(\"jwtToken\", token);\n        setAuthToken(token);\n\n        const decoded = jwt_decode(token);\n        dispatch(setCurrentUser(decoded));\n    }).catch(err => dispatch(setErrors(err)));\n};\n\nexport const logoutUser = () => dispatch => {\n    localStorage.removeItem(\"jwtToken\");\n    setAuthToken(false);\n    dispatch(setCurrentUser({}));\n};"]},"metadata":{},"sourceType":"module"}